### Starting build.
# Target: simple.ml.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:ml, file:simple.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules simple.ml > simple.ml.depends
# Target: board.mli.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:mli, file:board.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules board.mli > board.mli.depends # cached
# Target: board.cmi, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), byte, compile, extension:mli, file:board.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o board.cmi board.mli # cached
# Target: command.mli.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:mli, file:command.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o command.cmi command.mli # cached
# Target: risk_state.mli.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:mli, file:risk_state.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules risk_state.mli > risk_state.mli.depends # cached
# Target: risk_state.cmi, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), byte, compile, extension:mli, file:risk_state.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o risk_state.cmi risk_state.mli # cached
# Target: simple.cmo, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:simple.cmo, file:simple.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o simple.cmo simple.ml
+ ocamlfind ocamlc -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o simple.cmo simple.ml
File "simple.ml", line 224, characters 2-16:
Warning 10: this expression should have type unit.
File "simple.ml", line 174, characters 8-16:
Warning 26: unused variable clicked1.
# Target: board.ml.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:ml, file:board.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules board.ml > board.ml.depends # cached
# Target: board.cmx, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), compile, extension:cmx, extension:ml, file:board.cmx, file:board.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o board.cmx board.ml # cached
# Target: command.ml.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:ml, file:command.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules command.ml > command.ml.depends # cached
# Target: command.cmx, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), compile, extension:cmx, extension:ml, file:command.cmx, file:command.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o command.cmx command.ml # cached
# Target: risk_state.ml.depends, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), extension:ml, file:risk_state.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package lymp -modules risk_state.ml > risk_state.ml.depends # cached
# Target: risk_state.cmx, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), compile, extension:cmx, extension:ml, file:risk_state.cmx, file:risk_state.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o risk_state.cmx risk_state.ml # cached
# Target: simple.cmx, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), compile, extension:cmx, extension:ml, file:simple.cmx, file:simple.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o simple.cmx simple.ml
+ ocamlfind ocamlopt -c -thread -package oUnit -package str -package ANSITerminal -package lymp -o simple.cmx simple.ml
File "simple.ml", line 224, characters 2-16:
Warning 10: this expression should have type unit.
File "simple.ml", line 174, characters 8-16:
Warning 26: unused variable clicked1.
# Target: simple.native, tags: { package(ANSITerminal), package(lymp), package(oUnit), package(str), dont_link_with, extension:native, file:simple.native, link, native, ocaml, program, quiet, thread, traverse }
ocamlfind ocamlopt -linkpkg -thread -package oUnit -package str -package ANSITerminal -package lymp board.cmx command.cmx risk_state.cmx simple.cmx -o simple.native # cached
# Compilation successful.
